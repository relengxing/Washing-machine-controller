<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\EMF32_DEMO.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\EMF32_DEMO.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue Apr 05 14:05:44 2016
<BR><P>
<H3>Maximum Stack Usage =        760 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; App_Gprs_Main &rArr; App_Gprs_Receive &rArr; App_NL_Receive &rArr; App_NL_DealStruct &rArr; Reset_Para_All &rArr; Reset_Para_Function &rArr; GWPara_function &rArr; App_Para_Write &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[f]">ACMP0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">ACMP0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[f]">ACMP0_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[10]">ADC0_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[20]">AES_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[1c]">CMU_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[11]">DAC0_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[a]">DMA_IRQHandler</a> from em_dma.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[b]">GPIO_EVEN_IRQHandler</a> from systick.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[13]">GPIO_ODD_IRQHandler</a> from systick.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[12]">I2C0_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[1e]">LCD_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[17]">LESENSE_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[19]">LETIMER0_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[18]">LEUART0_IRQHandler</a> from bsp_uart.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[1f]">MSC_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[1a]">PCNT0_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[1b]">RTC_IRQHandler</a> from systick.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from systick.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[22]">SystemInit</a> from system_efm32tg.o(.text) referenced from startup_efm32tg.o(.text)
 <LI><a href="#[c]">TIMER0_IRQHandler</a> from bsp_timer.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[14]">TIMER1_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[d]">USART0_RX_IRQHandler</a> from bsp_uart.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[e]">USART0_TX_IRQHandler</a> from bsp_uart.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[15]">USART1_RX_IRQHandler</a> from bsp_uart.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[16]">USART1_TX_IRQHandler</a> from bsp_uart.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[1d]">VCMP_IRQHandler</a> from startup_efm32tg.o(.text) referenced from startup_efm32tg.o(RESET)
 <LI><a href="#[23]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_efm32tg.o(.text)
 <LI><a href="#[24]">_sputc</a> from printf6.o(i._sputc) referenced from printf6.o(i.__0sprintf$6)
 <LI><a href="#[21]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[23]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(.text)
</UL>
<P><STRONG><a name="[136]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[25]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[130]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[137]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[138]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[139]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[13a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[13b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[27]"></a>Device_Info_Init</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWPara_function
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCSetTime
</UL>

<P><STRONG><a name="[2a]"></a>rePower_TEST</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rePower_TEST &rArr; Bsp_Led_SetL
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_SetL
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_SetH
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>main</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = main &rArr; App_Gprs_Main &rArr; App_Gprs_Receive &rArr; App_NL_Receive &rArr; App_NL_DealStruct &rArr; Reset_Para_All &rArr; Reset_Para_Function &rArr; GWPara_function &rArr; App_Para_Write &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM2
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Test
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Key_PinConfig
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadMeterMain
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ManipulatorMain
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Main
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Get_WorkState
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_Get_WorkState
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rePower_TEST
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>CMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>LESENSE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>LETIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>MSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PCNT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>VCMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>GPIO_Key_TimeCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; SYS_UART_FSR
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_FSR
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_TimeCount
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Task_TimeCall
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Agr_Time_msCall
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_Task_TimeCall
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Key_TimeCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[13c]"></a>Sys_Get_RTC_Count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systick.o(.text), UNUSED)

<P><STRONG><a name="[1b]"></a>RTC_IRQHandler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC_IRQHandler &rArr; BSP_RTCGetTime &rArr; Bsp_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCGetTime
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Set_WorkState
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_Set_WorkState
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Get_WorkState
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_Get_WorkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>GPIO_ODD_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ODD_IRQHandler &rArr; GPIO_PortInGet
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntClear
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPIO_EVEN_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EVEN_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>SysGetKeyIntFlag</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysGetKeyIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ManipulatorMain
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Set
</UL>

<P><STRONG><a name="[13d]"></a>SysTick_Get_Second_Counts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systick.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>SysTick_Get_Counts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systick.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>Bsp_Timer_ISR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[2d]"></a>Delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Test
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rePower_TEST
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Repower
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Power_On
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_On_Off_Ctrl
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Set
</UL>

<P><STRONG><a name="[45]"></a>DelayMs</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, systick.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Para_Main
</UL>

<P><STRONG><a name="[47]"></a>SystemHFClockGet</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, system_efm32tg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_DBGClkGet
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[46]"></a>SystemCoreClockGet</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, system_efm32tg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_LFClkGet
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFXOClockSet
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFXOClockSet
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM2
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM3
</UL>

<P><STRONG><a name="[13f]"></a>SystemHFXOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_efm32tg.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>SystemHFXOClockSet</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, system_efm32tg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>

<P><STRONG><a name="[22]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_efm32tg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>SystemLFRCOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_efm32tg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_LFClkGet
</UL>

<P><STRONG><a name="[53]"></a>SystemULFRCOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_efm32tg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_LFClkGet
</UL>

<P><STRONG><a name="[52]"></a>SystemLFXOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_efm32tg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_LFClkGet
</UL>

<P><STRONG><a name="[49]"></a>SystemLFXOClockSet</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, system_efm32tg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
</UL>

<P><STRONG><a name="[3a]"></a>assertEFM</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, em_assert.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DbgLocationSet
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_PCNTClockExternalSet
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorTuningSet
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorTuningGet
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_LCDClkFDIVSet
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOStartupDelaySet
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_AUXHFRCOBandSet
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivGet
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_CalibrateConfig
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_Calibrate
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_LFClkGet
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_DBGClkGet
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_DivToLog2
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInGet
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_SetL
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_SetH
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Toggle
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_I2CSPM_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitI2s
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitSync
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitAsync
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Reset
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_BaudrateSyncSet
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_BaudrateAsyncSet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Reset
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_InitCC
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CompareSet
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CompareGet
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Reset
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Enable
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateSet
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateGet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BusFreqSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntConfig
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveModeSet
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RefreshPingPong
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelEnabled
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelEnable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CfgDescrScatterGather
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CfgDescr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CfgChannel
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ActivateScatterGather
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ActivatePingPong
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ActivateBasic
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ActivateAuto
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_On_Off_Ctrl
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
</UL>

<P><STRONG><a name="[4d]"></a>CMU_ClockSelectGet</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_DBGClkGet
</UL>

<P><STRONG><a name="[54]"></a>CMU_Calibrate</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, em_cmu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[55]"></a>CMU_CalibrateConfig</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, em_cmu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[56]"></a>CMU_ClockDivGet</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, em_cmu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_Log2ToDiv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_DivToLog2
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[58]"></a>CMU_ClockDivSet</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CMU_ClockDivSet &rArr; CMU_FlashWaitStateMax &rArr; CMU_FlashWaitStateControl
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_Sync
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_DivToLog2
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_FlashWaitStateMax
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_FlashWaitStateControl
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[5a]"></a>CMU_ClockEnable</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CMU_ClockEnable &rArr; BITBAND_Peripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_Sync
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BITBAND_Peripheral
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Key_PinConfig
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_All_Pin
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_I2CSPM_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_Operate
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_PIN_CFG
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_PIN_CFG
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Timer_Config
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[31]"></a>CMU_ClockFreqGet</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_LFClkGet
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_DBGClkGet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_AUXClkGet
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_DivToLog2
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_BaudrateSyncSet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_BaudrateGet
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_BaudrateAsyncSet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateSet
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateGet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BusFreqSet
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BusFreqGet
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Timer_Config
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[5c]"></a>CMU_OscillatorEnable</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CMU_OscillatorEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_UpdateOscConfig
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
</UL>

<P><STRONG><a name="[5e]"></a>CMU_ClockSelectSet</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CMU_ClockSelectSet &rArr; CMU_OscillatorEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_UpdateOscConfig
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_FlashWaitStateMax
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_FlashWaitStateControl
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BITBAND_Peripheral
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[140]"></a>CMU_FreezeEnable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, em_cmu.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>CMU_AUXHFRCOBandGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, em_cmu.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>CMU_AUXHFRCOBandSet</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, em_cmu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[142]"></a>CMU_HFRCOBandGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, em_cmu.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>CMU_HFRCOBandSet</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, em_cmu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_FlashWaitStateMax
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_FlashWaitStateControl
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[143]"></a>CMU_HFRCOStartupDelayGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, em_cmu.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>CMU_HFRCOStartupDelaySet</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, em_cmu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[144]"></a>CMU_LCDClkFDIVGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, em_cmu.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>CMU_LCDClkFDIVSet</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, em_cmu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[63]"></a>CMU_OscillatorTuningGet</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, em_cmu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[64]"></a>CMU_OscillatorTuningSet</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, em_cmu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[145]"></a>CMU_PCNTClockExternalGet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, em_cmu.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>CMU_PCNTClockExternalSet</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, em_cmu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BITBAND_Peripheral
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[a]"></a>DMA_IRQHandler</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, em_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA_ActivateAuto</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, em_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Prepare
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[68]"></a>DMA_ActivateBasic</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, em_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Prepare
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[69]"></a>DMA_ActivatePingPong</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, em_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Prepare
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[6a]"></a>DMA_ActivateScatterGather</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, em_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[6b]"></a>DMA_CfgChannel</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, em_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BITBAND_Peripheral
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[6d]"></a>DMA_CfgDescr</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, em_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[6e]"></a>DMA_CfgDescrScatterGather</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, em_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[6f]"></a>DMA_ChannelEnable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, em_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[70]"></a>DMA_ChannelEnabled</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, em_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[72]"></a>DMA_Reset</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, em_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>

<P><STRONG><a name="[71]"></a>DMA_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, em_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Reset
</UL>

<P><STRONG><a name="[73]"></a>DMA_RefreshPingPong</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, em_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[38]"></a>EMU_EnterEM2</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, em_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EMU_EnterEM2 &rArr; EMU_Restore
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getErrataFixEmuE107En
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>EMU_EnterEM3</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, em_emu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getErrataFixEmuE107En
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Restore
</UL>

<P><STRONG><a name="[146]"></a>EMU_EnterEM4</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, em_emu.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>EMU_MemPwrDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, em_emu.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>EMU_UpdateOscConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, em_emu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
</UL>

<P><STRONG><a name="[148]"></a>EMU_EM23Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, em_emu.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>GPIO_DbgLocationSet</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, em_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[78]"></a>GPIO_DriveModeSet</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, em_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[79]"></a>GPIO_IntConfig</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, em_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIO_IntConfig &rArr; BITBAND_Peripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BITBAND_Peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Key_PinConfig
</UL>

<P><STRONG><a name="[7b]"></a>GPIO_PinModeSet</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, em_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Key_PinConfig
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Main
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_All_Pin
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_I2CSPM_BasePower_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_I2CSPM_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_Operate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_Power_OFF
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_On_Off_Ctrl
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODE485_TxEnable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODE485_RxEnable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_PIN_CFG
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_PIN_CFG
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_PIN_CFG
</UL>

<P><STRONG><a name="[7c]"></a>I2C_BusFreqGet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, em_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[7d]"></a>I2C_BusFreqSet</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, em_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[7e]"></a>I2C_Enable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, em_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BITBAND_Peripheral
</UL>

<P><STRONG><a name="[80]"></a>I2C_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, em_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BusFreqSet
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BITBAND_Peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_I2CSPM_Init
</UL>

<P><STRONG><a name="[149]"></a>I2C_Reset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, em_i2c.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>I2C_Transfer</STRONG> (Thumb, 702 bytes, Stack size 24 bytes, em_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_I2CSPM_Transfer
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferInit
</UL>

<P><STRONG><a name="[82]"></a>I2C_TransferInit</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, em_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_TransferInit &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_I2CSPM_Transfer
</UL>

<P><STRONG><a name="[84]"></a>LEUART_BaudrateCalc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, em_leuart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateGet
</UL>

<P><STRONG><a name="[83]"></a>LEUART_BaudrateGet</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, em_leuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateCalc
</UL>

<P><STRONG><a name="[85]"></a>LEUART_BaudrateSet</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, em_leuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LEUART_BaudrateSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
</UL>

<P><STRONG><a name="[87]"></a>LEUART_Enable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, em_leuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>

<P><STRONG><a name="[89]"></a>LEUART_FreezeEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, em_leuart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Reset
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
</UL>

<P><STRONG><a name="[88]"></a>LEUART_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, em_leuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LEUART_Init &rArr; LEUART_BaudrateSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_FreezeEnable
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateSet
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[8a]"></a>LEUART_Reset</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, em_leuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEUART_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_FreezeEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[14a]"></a>LEUART_Rx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, em_leuart.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>LEUART_RxExt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, em_leuart.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>LEUART_Tx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, em_leuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEUART_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Write
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_ISR
</UL>

<P><STRONG><a name="[8c]"></a>LEUART_TxExt</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, em_leuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>

<P><STRONG><a name="[8d]"></a>LEUART_TxDmaInEM2Enable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, em_leuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEUART_TxDmaInEM2Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[8e]"></a>LEUART_RxDmaInEM2Enable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, em_leuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEUART_RxDmaInEM2Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[8f]"></a>RTC_CompareGet</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, em_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[90]"></a>RTC_CompareSet</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, em_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_CompareSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[92]"></a>RTC_Enable</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, em_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CounterReset
</UL>

<P><STRONG><a name="[14c]"></a>RTC_FreezeEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, em_rtc.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>RTC_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, em_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[14d]"></a>RTC_Reset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, em_rtc.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>RTC_CounterReset</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, em_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Enable
</UL>

<P><STRONG><a name="[93]"></a>TIMER_Init</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, em_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Timer_Config
</UL>

<P><STRONG><a name="[94]"></a>TIMER_InitCC</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, em_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[95]"></a>TIMER_Reset</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, em_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[96]"></a>USART_BaudrateAsyncSet</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, em_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitAsync
</UL>

<P><STRONG><a name="[98]"></a>USART_BaudrateCalc</STRONG> (Thumb, 104 bytes, Stack size 28 bytes, em_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_BaudrateGet
</UL>

<P><STRONG><a name="[97]"></a>USART_BaudrateGet</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, em_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_BaudrateCalc
</UL>

<P><STRONG><a name="[99]"></a>USART_BaudrateSyncSet</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, em_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitSync
</UL>

<P><STRONG><a name="[9a]"></a>USART_Enable</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, em_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitI2s
</UL>

<P><STRONG><a name="[9b]"></a>USART_Reset</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, em_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitSync
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitAsync
</UL>

<P><STRONG><a name="[9c]"></a>USART_InitAsync</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, em_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USART_InitAsync &rArr; USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Reset
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_BaudrateAsyncSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitIrDA
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[9d]"></a>USART_InitSync</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, em_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Reset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_BaudrateSyncSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitI2s
</UL>

<P><STRONG><a name="[9e]"></a>USART_InitIrDA</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, em_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitAsync
</UL>

<P><STRONG><a name="[9f]"></a>USART_InitI2s</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, em_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitSync
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
</UL>

<P><STRONG><a name="[14e]"></a>USART_InitPrsTrigger</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, em_usart.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>USART_Rx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, em_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_ISR
</UL>

<P><STRONG><a name="[14f]"></a>USART_RxDouble</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, em_usart.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>USART_RxDoubleExt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, em_usart.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>USART_RxExt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, em_usart.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>USART_SpiTransfer</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, em_usart.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>USART_Tx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, em_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Write
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_ISR
</UL>

<P><STRONG><a name="[153]"></a>USART_TxDouble</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, em_usart.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>USART_TxDoubleExt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, em_usart.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>USART_TxExt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, em_usart.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>WDOG_Enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, em_wdog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BITBAND_Peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Wdt_Feed
</UL>

<P><STRONG><a name="[d0]"></a>WDOG_Feed</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, em_wdog.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Wdt_Feed
</UL>

<P><STRONG><a name="[a2]"></a>WDOG_Lock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, em_wdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WDOG_Lock &rArr; BITBAND_Peripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BITBAND_Peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Init
</UL>

<P><STRONG><a name="[a3]"></a>WDOG_Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, em_wdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WDOG_Init &rArr; WDOG_Lock &rArr; BITBAND_Peripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Lock
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BITBAND_Peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Wdt_Init
</UL>

<P><STRONG><a name="[a4]"></a>Bsp_I2CSPM_Init</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, bsp_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_I2CSPM_BasePower_Init
</UL>

<P><STRONG><a name="[156]"></a>Bsp_I2CSPM_Disable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_iic.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>Bsp_I2CSPM_BasePower_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_I2CSPM_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_Operate
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_EEPROM_Write
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_EEPROM_Read
</UL>

<P><STRONG><a name="[a8]"></a>Bsp_I2CSPM_Transfer</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bsp_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Bsp_I2CSPM_Transfer &rArr; I2C_TransferInit &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_EEPROM_Write
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_EEPROM_Read
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_EEPROM_AckPoll
</UL>

<P><STRONG><a name="[aa]"></a>Bsp_EEPROM_Read</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, bsp_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Bsp_EEPROM_Read &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_I2CSPM_Transfer
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_I2CSPM_BasePower_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WR_OneData
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Para_Read
</UL>

<P><STRONG><a name="[ab]"></a>Bsp_EEPROM_Write</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, bsp_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_I2CSPM_Transfer
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_I2CSPM_BasePower_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_EEPROM_AckPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WR_OneData
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Para_Write
</UL>

<P><STRONG><a name="[30]"></a>Bsp_Key_PinConfig</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Bsp_Key_PinConfig &rArr; GPIO_IntConfig &rArr; BITBAND_Peripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>Bsp_All_Pin</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, bsp_led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>

<P><STRONG><a name="[2f]"></a>Bsp_Led_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Bsp_Led_Init &rArr; CMU_ClockEnable &rArr; BITBAND_Peripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>Bsp_Led_Toggle</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bsp_led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>

<P><STRONG><a name="[2c]"></a>Bsp_Led_SetL</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bsp_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bsp_Led_SetL
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ManipulatorMain
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rePower_TEST
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Is_OnState
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Set
</UL>

<P><STRONG><a name="[2b]"></a>Bsp_Led_SetH</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bsp_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bsp_Led_SetH
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ManipulatorMain
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rePower_TEST
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Is_OnState
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_On
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_DealStruct
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Set
</UL>

<P><STRONG><a name="[ae]"></a>Bsp_Led_On</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bsp_led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_SetH
</UL>

<P><STRONG><a name="[3d]"></a>Bsp_Led_TimeCount</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[af]"></a>Bsp_Led_Is_OnState</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_SetL
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_SetH
</UL>

<P><STRONG><a name="[a7]"></a>Bsp_Power_Operate</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, bsp_power_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Bsp_Power_Operate &rArr; CMU_ClockEnable &rArr; BITBAND_Peripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_I2CSPM_BasePower_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_Power_OFF
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_Power_ON
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Power_Off
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Power_On
</UL>

<P><STRONG><a name="[b0]"></a>Bsp_Get_Week</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, bsp_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Bsp_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteBcdToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCGetTime
</UL>

<P><STRONG><a name="[28]"></a>BSP_RTCSetTime</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, bsp_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_RTCSetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IsLeap_Year
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteBcdToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Info_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_DealStruct
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeacilParaID_040D
</UL>

<P><STRONG><a name="[41]"></a>BSP_RTCGetTime</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, bsp_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_RTCGetTime &rArr; Bsp_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IsLeap_Year
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteHexToBcd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_DealStruct
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWFirstData_function
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeacilParaID_040D
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_Report
</UL>

<P><STRONG><a name="[2e]"></a>BSP_RTC_Init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, bsp_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_RTC_Init &rArr; CMU_ClockSelectSet &rArr; CMU_OscillatorEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCSetTime
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Enable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CompareSet
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>App_CommInit</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, bsp_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[32]"></a>Bsp_Test</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Bsp_Test &rArr; App_Gprs_Set &rArr; App_GprsCommInit &rArr; BSP_UART_Init &rArr; USART_InitAsync &rArr; USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>Bsp_Timer_Config</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, bsp_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>

<P><STRONG><a name="[c]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Timer_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>UART1_PIN_CFG</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART1_PIN_CFG &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[bb]"></a>UART2_PIN_CFG</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART2_PIN_CFG &rArr; CMU_ClockEnable &rArr; BITBAND_Peripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[bc]"></a>UART3_PIN_CFG</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART3_PIN_CFG &rArr; CMU_ClockEnable &rArr; BITBAND_Peripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[bd]"></a>GetCommHandle</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bsp_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_FSR
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_ClearTxBuff
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_ClearRxBuff
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IsRxFrame
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_TxState
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[157]"></a>GetCommPort</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bsp_uart.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>BSP_UART_Init</STRONG> (Thumb, 604 bytes, Stack size 40 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_UART_Init &rArr; USART_InitAsync &rArr; USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitAsync
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_RxDmaInEM2Enable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_TxDmaInEM2Enable
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Reset
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommHandle
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_PIN_CFG
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_PIN_CFG
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_PIN_CFG
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_ManipulatorInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agreememt_init_rs232
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GprsCommInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CommInit
</UL>

<P><STRONG><a name="[c4]"></a>UART_RxEnable</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RxEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Write
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_ISR
</UL>

<P><STRONG><a name="[c0]"></a>MODE485_RxEnable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MODE485_RxEnable &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_ISR
</UL>

<P><STRONG><a name="[c1]"></a>SYS_UART_ISR</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SYS_UART_ISR &rArr; MODE485_RxEnable &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Tx
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Rx
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Tx
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODE485_RxEnable
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TX_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RX_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_TX_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_RX_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART0_IRQHandler
</UL>

<P><STRONG><a name="[18]"></a>LEUART0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LEUART0_IRQHandler &rArr; SYS_UART_ISR &rArr; MODE485_RxEnable &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>USART0_RX_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART0_RX_IRQHandler &rArr; SYS_UART_ISR &rArr; MODE485_RxEnable &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>USART0_TX_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART0_TX_IRQHandler &rArr; SYS_UART_ISR &rArr; MODE485_RxEnable &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>USART1_RX_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART1_RX_IRQHandler &rArr; SYS_UART_ISR &rArr; MODE485_RxEnable &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>USART1_TX_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART1_TX_IRQHandler &rArr; SYS_UART_ISR &rArr; MODE485_RxEnable &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efm32tg.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>MODE485_TxEnable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MODE485_TxEnable &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Write
</UL>

<P><STRONG><a name="[c6]"></a>SendReceiveMsg</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bsp_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UART_FSR
</UL>

<P><STRONG><a name="[3b]"></a>SYS_UART_FSR</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_UART_FSR
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReceiveMsg
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c7]"></a>BSP_UART_TxState</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_UART_TxState
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Write
</UL>

<P><STRONG><a name="[c8]"></a>BSP_UART_Write</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_UART_Write &rArr; MODE485_TxEnable &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Tx
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Tx
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_TxState
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODE485_TxEnable
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxEnable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_SendStruct
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_ReadMeter
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_SendStruct
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_SendArray
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Agr_MakeFrame
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_AT_CMD
</UL>

<P><STRONG><a name="[ca]"></a>BSP_UART_IsRxFrame</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_UART_IsRxFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ManipulatorMain
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_ReadMeter
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_ReceStruct
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGuiYue
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Receive
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_AT_CMD
</UL>

<P><STRONG><a name="[cb]"></a>BSP_UART_ClearRxBuff</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_UART_ClearRxBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Main
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_ClearBuff
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_ClearBuff
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGuiYue
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Repower
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_AT_CMD
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Set
</UL>

<P><STRONG><a name="[cd]"></a>BSP_UART_ClearTxBuff</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_UART_ClearTxBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Main
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_ClearBuff
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_ClearBuff
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Repower
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_AT_CMD
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Set
</UL>

<P><STRONG><a name="[ce]"></a>Bsp_Wdt_Init</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bsp_wdt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Bsp_Wdt_Init &rArr; WDOG_Init &rArr; WDOG_Lock &rArr; BITBAND_Peripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_DealStruct
</UL>

<P><STRONG><a name="[cf]"></a>Bsp_Wdt_Feed</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_wdt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Feed
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Enable
</UL>

<P><STRONG><a name="[104]"></a>TwoByteToShort</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dealwithchar.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Rx_Frame
</UL>

<P><STRONG><a name="[158]"></a>ThreeByteToInt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dealwithchar.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>FourByteToInt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dealwithchar.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>FiveByteToLong</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, dealwithchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>

<P><STRONG><a name="[15a]"></a>ShortToByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dealwithchar.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>IntToFourByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dealwithchar.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>LongToFiveByte</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dealwithchar.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>ByteBcdToHex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dealwithchar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCSetTime
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWFirstData_function
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDccHex
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdAddHex
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FiveByteBcdToHex
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FourByteBcdToHex
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreeByteBcdToHex
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoByteBcdToHex
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Week
</UL>

<P><STRONG><a name="[d3]"></a>TwoByteBcdToHex</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, dealwithchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteBcdToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Para_Main
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AberranceRate
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dada02ToINT64S
</UL>

<P><STRONG><a name="[d4]"></a>ThreeByteBcdToHex</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, dealwithchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteBcdToHex
</UL>

<P><STRONG><a name="[d5]"></a>FourByteBcdToHex</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dealwithchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteBcdToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dada03ToINT64S
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dada03ToINT32S
</UL>

<P><STRONG><a name="[d6]"></a>FiveByteBcdToHex</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, dealwithchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteBcdToHex
</UL>

<P><STRONG><a name="[b3]"></a>ByteHexToBcd</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dealwithchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ByteHexToBcd
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCGetTime
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdDccHex
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdAddHex
</UL>

<P><STRONG><a name="[dc]"></a>ShortHexToBCD</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, dealwithchar.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AberranceRate
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT64SToDada02
</UL>

<P><STRONG><a name="[e0]"></a>IntHexToBcd</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, dealwithchar.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT32UToDada03
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT64SToDada03
</UL>

<P><STRONG><a name="[15d]"></a>LongHexToBcd</STRONG> (Thumb, 118 bytes, Stack size 36 bytes, dealwithchar.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>BcdAddHex</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, dealwithchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteBcdToHex
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteHexToBcd
</UL>

<P><STRONG><a name="[d8]"></a>BcdDccHex</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dealwithchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteBcdToHex
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteHexToBcd
</UL>

<P><STRONG><a name="[d9]"></a>Dada02ToINT64S</STRONG> (Thumb, 266 bytes, Stack size 36 bytes, dealwithchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoByteBcdToHex
</UL>

<P><STRONG><a name="[da]"></a>INT64SToDada02</STRONG> (Thumb, 402 bytes, Stack size 32 bytes, dealwithchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortHexToBCD
</UL>

<P><STRONG><a name="[dd]"></a>Dada03ToINT32S</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dealwithchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FourByteBcdToHex
</UL>

<P><STRONG><a name="[de]"></a>Dada03ToINT64S</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dealwithchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FourByteBcdToHex
</UL>

<P><STRONG><a name="[df]"></a>INT64SToDada03</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dealwithchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntHexToBcd
</UL>

<P><STRONG><a name="[e1]"></a>INT32UToDada03</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, dealwithchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntHexToBcd
</UL>

<P><STRONG><a name="[15e]"></a>TeskCS</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, dealwithchar.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>Labs</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dealwithchar.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>FineMaxDataInverse</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dealwithchar.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>InvSqrt</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, dealwithchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AberranceRate
</UL>

<P><STRONG><a name="[e7]"></a>AberranceRate</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dealwithchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSqrt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortHexToBCD
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoByteBcdToHex
</UL>

<P><STRONG><a name="[161]"></a>powfun</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dealwithchar.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>App_DataBcdIsOK</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, dealwithchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = App_DataBcdIsOK
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWFirstData_function
</UL>

<P><STRONG><a name="[100]"></a>App_DataMatchDataIsSame</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dealwithchar.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Para_Main
</UL>

<P><STRONG><a name="[ea]"></a>App_GprsCommInit</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, app_m6310.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = App_GprsCommInit &rArr; BSP_UART_Init &rArr; USART_InitAsync &rArr; USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Main
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Repower
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Set
</UL>

<P><STRONG><a name="[43]"></a>App_Gprs_Set_WorkState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_m6310.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Main
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Set
</UL>

<P><STRONG><a name="[37]"></a>App_Gprs_Get_WorkState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_m6310.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Main
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Set
</UL>

<P><STRONG><a name="[ec]"></a>App_Gprs_Power_On</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_m6310.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = App_Gprs_Power_On &rArr; Bsp_Power_Operate &rArr; CMU_ClockEnable &rArr; BITBAND_Peripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_Operate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_On_Off_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Main
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Repower
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Set
</UL>

<P><STRONG><a name="[ed]"></a>App_Gprs_Power_Off</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_m6310.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = App_Gprs_Power_Off &rArr; Bsp_Power_Operate &rArr; CMU_ClockEnable &rArr; BITBAND_Peripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_Operate
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Main
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Repower
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Set
</UL>

<P><STRONG><a name="[3e]"></a>App_Gprs_Task_TimeCall</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_m6310.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[162]"></a>App_Gprs_GetCSQ</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, app_m6310.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>App_Gprs_AT_CMD</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, app_m6310.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = App_Gprs_AT_CMD &rArr; BSP_UART_Write &rArr; MODE485_TxEnable &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_ClearTxBuff
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_ClearRxBuff
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IsRxFrame
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Main
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Repower
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Set
</UL>

<P><STRONG><a name="[f1]"></a>App_Gprs_SetConentIP</STRONG> (Thumb, 226 bytes, Stack size 80 bytes, app_m6310.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWPara_function
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[f3]"></a>App_Gprs_GetConentIP</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, app_m6310.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = App_Gprs_GetConentIP &rArr; GWPara_function &rArr; App_Para_Write &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWPara_function
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Main
</UL>

<P><STRONG><a name="[f4]"></a>App_Gprs_Receive</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, app_m6310.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = App_Gprs_Receive &rArr; App_NL_Receive &rArr; App_NL_DealStruct &rArr; Reset_Para_All &rArr; Reset_Para_Function &rArr; GWPara_function &rArr; App_Para_Write &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_Receive
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IsRxFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Main
</UL>

<P><STRONG><a name="[f6]"></a>App_Gprs_Repower</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, app_m6310.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_AT_CMD
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Power_Off
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Power_On
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GprsCommInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_ClearTxBuff
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_ClearRxBuff
</UL>

<P><STRONG><a name="[b7]"></a>App_Gprs_Set</STRONG> (Thumb, 432 bytes, Stack size 8 bytes, app_m6310.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = App_Gprs_Set &rArr; App_GprsCommInit &rArr; BSP_UART_Init &rArr; USART_InitAsync &rArr; USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Set_WorkState
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetKeyIntFlag
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_SetL
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_SetH
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Get_WorkState
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_AT_CMD
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Power_Off
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Power_On
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GprsCommInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_ClearTxBuff
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_ClearRxBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Test
</UL>

<P><STRONG><a name="[f8]"></a>App_Gprs_Report</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_m6310.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = App_Gprs_Report &rArr; App_NL_Report &rArr; GWFirstData_function &rArr; App_BigSammTpyeToLen &rArr; GWPara_function &rArr; App_Para_Write &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_Report
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Main
</UL>

<P><STRONG><a name="[35]"></a>App_Gprs_Main</STRONG> (Thumb, 540 bytes, Stack size 8 bytes, app_m6310.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = App_Gprs_Main &rArr; App_Gprs_Receive &rArr; App_NL_Receive &rArr; App_NL_DealStruct &rArr; Reset_Para_All &rArr; Reset_Para_Function &rArr; GWPara_function &rArr; App_Para_Write &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Set_WorkState
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Get_WorkState
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Report
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Receive
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_GetConentIP
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_AT_CMD
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Power_Off
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Power_On
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GprsCommInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_ClearTxBuff
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_ClearRxBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>agreememt_init_rs232</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, app_agr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Agr_Init
</UL>

<P><STRONG><a name="[fb]"></a>App_Agr_Init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, app_agr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWPara_function
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agreememt_init_rs232
</UL>

<P><STRONG><a name="[fc]"></a>CheckAddress</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, app_agr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Rx_Frame
</UL>

<P><STRONG><a name="[ff]"></a>App_Para_Main</STRONG> (Thumb, 502 bytes, Stack size 64 bytes, app_agr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWPara_function
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Agr_MakeFrame
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_DataMatchDataIsSame
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoByteBcdToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiyue_dispose_main
</UL>

<P><STRONG><a name="[102]"></a>guiyue_dispose_main</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_agr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Para_Main
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Rx_Frame
</UL>

<P><STRONG><a name="[103]"></a>Parse_Rx_Frame</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, app_agr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16_IBM
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiyue_dispose_main
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAddress
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoByteToShort
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGuiYue
</UL>

<P><STRONG><a name="[106]"></a>TaskGuiYue</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, app_agr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Rx_Frame
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_ClearRxBuff
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IsRxFrame
</UL>

<P><STRONG><a name="[3c]"></a>App_Agr_Time_msCall</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_agr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[107]"></a>App_Para_Write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, app_para.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = App_Para_Write &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_EEPROM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWPara_function
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Para_Function
</UL>

<P><STRONG><a name="[108]"></a>App_Para_Read</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, app_para.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = App_Para_Read &rArr; Bsp_EEPROM_Read &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_EEPROM_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWPara_function
</UL>

<P><STRONG><a name="[110]"></a>OSTimeDly</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_para.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Para_Function
</UL>

<P><STRONG><a name="[163]"></a>Clear_Communiction_Para_Flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_para.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>Read_Communiction_Para_Flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_para.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>GWPara_function</STRONG> (Thumb, 556 bytes, Stack size 32 bytes, app_para.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GWPara_function &rArr; App_Para_Write &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Para_Read
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Para_Write
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaData_SearchID
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeacilParaID_04FF
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeacilParaID_040F
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeacilParaID_040D
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Info_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_DealStruct
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BigSammTpyeToLen
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Para_Function
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Para_Main
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Agr_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_Report
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_GetConentIP
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_SetConentIP
</UL>

<P><STRONG><a name="[10e]"></a>Reset_Para_Function</STRONG> (Thumb, 172 bytes, Stack size 208 bytes, app_para.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = Reset_Para_Function &rArr; GWPara_function &rArr; App_Para_Write &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWPara_function
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Para_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Para_All
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Para_Not_Comunication
</UL>

<P><STRONG><a name="[111]"></a>Reset_Para_Not_Comunication</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_para.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = Reset_Para_Not_Comunication &rArr; Reset_Para_Function &rArr; GWPara_function &rArr; App_Para_Write &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Para_Function
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_DealStruct
</UL>

<P><STRONG><a name="[112]"></a>Reset_Para_All</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_para.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = Reset_Para_All &rArr; Reset_Para_Function &rArr; GWPara_function &rArr; App_Para_Write &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Para_Function
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_DealStruct
</UL>

<P><STRONG><a name="[105]"></a>Crc16_IBM</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_agr_makeframe.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Agr_MakeFrame
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Rx_Frame
</UL>

<P><STRONG><a name="[101]"></a>App_Agr_MakeFrame</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, app_agr_makeframe.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16_IBM
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Para_Main
</UL>

<P><STRONG><a name="[113]"></a>App_BigSammTpyeToLen</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, app_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = App_BigSammTpyeToLen &rArr; GWPara_function &rArr; App_Para_Write &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWPara_function
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWFirstData_function
</UL>

<P><STRONG><a name="[114]"></a>App_WR_OneData</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, app_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = App_WR_OneData &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_EEPROM_Write
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_EEPROM_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Operate_BigData_OneData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWFirstData_function
</UL>

<P><STRONG><a name="[115]"></a>GWFirstData_function</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, app_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = GWFirstData_function &rArr; App_BigSammTpyeToLen &rArr; GWPara_function &rArr; App_Para_Write &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCGetTime
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteBcdToHex
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WR_OneData
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BigSammTpyeToLen
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneData_SearchID
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_DataBcdIsOK
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadMeterMain
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_ReadMeter
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_Report
</UL>

<P><STRONG><a name="[118]"></a>Operate_BigData_OneData</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, app_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Operate_BigData_OneData &rArr; App_WR_OneData &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WR_OneData
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_ONEDATA_Function
</UL>

<P><STRONG><a name="[119]"></a>Reset_ONEDATA_Function</STRONG> (Thumb, 34 bytes, Stack size 136 bytes, app_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = Reset_ONEDATA_Function &rArr; Operate_BigData_OneData &rArr; App_WR_OneData &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Operate_BigData_OneData
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_DealStruct
</UL>

<P><STRONG><a name="[11b]"></a>App_485_Power_ON</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_485rn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = App_485_Power_ON &rArr; Bsp_Power_Operate &rArr; CMU_ClockEnable &rArr; BITBAND_Peripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_Operate
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_ManipulatorInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_Init
</UL>

<P><STRONG><a name="[11c]"></a>App_485_Init</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, app_485rn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = App_485_Init &rArr; GWPara_function &rArr; App_Para_Write &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWPara_function
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_Power_ON
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadMeterMain
</UL>

<P><STRONG><a name="[11d]"></a>App_485_ManipulatorInit</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, app_485rn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = App_485_ManipulatorInit &rArr; BSP_UART_Init &rArr; USART_InitAsync &rArr; USART_BaudrateAsyncSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_Power_ON
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ManipulatorMain
</UL>

<P><STRONG><a name="[11e]"></a>App_485_Power_OFF</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_485rn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = App_485_Power_OFF &rArr; Bsp_Power_Operate &rArr; CMU_ClockEnable &rArr; BITBAND_Peripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Power_Operate
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ManipulatorMain
</UL>

<P><STRONG><a name="[42]"></a>App_485_Set_WorkState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_485rn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadMeterMain
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ManipulatorMain
</UL>

<P><STRONG><a name="[36]"></a>App_485_Get_WorkState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_485rn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadMeterMain
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ManipulatorMain
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>App_485_Task_TimeCall</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_485rn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11f]"></a>App_485_SendArray</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, app_485rn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_ClearBuff
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Write
</UL>

<P><STRONG><a name="[120]"></a>App_485_SendStruct</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, app_485rn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_ClearBuff
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Write
</UL>

<P><STRONG><a name="[121]"></a>App_485_ReceStruct</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, app_485rn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = App_485_ReceStruct &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IsRxFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_ReadMeter
</UL>

<P><STRONG><a name="[123]"></a>App_485_FillCSCheck</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, app_485rn.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_FillAddress
</UL>

<P><STRONG><a name="[122]"></a>App_485_FillAddress</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, app_485rn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_FillCSCheck
</UL>

<P><STRONG><a name="[124]"></a>App_485_ReadMeter</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, app_485rn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = App_485_ReadMeter &rArr; GWFirstData_function &rArr; App_BigSammTpyeToLen &rArr; GWPara_function &rArr; App_Para_Write &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_ReceStruct
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_ClearBuff
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWFirstData_function
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IsRxFrame
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadMeterMain
</UL>

<P><STRONG><a name="[33]"></a>App_ManipulatorMain</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, app_485rn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = App_ManipulatorMain &rArr; App_NL_Receive &rArr; App_NL_DealStruct &rArr; Reset_Para_All &rArr; Reset_Para_Function &rArr; GWPara_function &rArr; App_Para_Write &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_Set_WorkState
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetKeyIntFlag
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_SetL
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_SetH
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_Get_WorkState
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_Power_OFF
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_ManipulatorInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_Receive
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_IsRxFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>App_ReadMeterMain</STRONG> (Thumb, 158 bytes, Stack size 144 bytes, app_485rn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = App_ReadMeterMain &rArr; App_485_ReadMeter &rArr; GWFirstData_function &rArr; App_BigSammTpyeToLen &rArr; GWPara_function &rArr; App_Para_Write &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_Set_WorkState
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_Get_WorkState
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_ReadMeter
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWFirstData_function
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>App_NL_ClearBuff</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_nl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = App_NL_ClearBuff &rArr; BSP_UART_ClearTxBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_ClearTxBuff
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_ClearRxBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_Receive
</UL>

<P><STRONG><a name="[128]"></a>App_NL_FillCSCheck</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, app_nl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = App_NL_FillCSCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_DealStruct
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_Ask
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_Report
</UL>

<P><STRONG><a name="[126]"></a>App_NL_SendStruct</STRONG> (Thumb, 100 bytes, Stack size 224 bytes, app_nl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = App_NL_SendStruct &rArr; BSP_UART_Write &rArr; MODE485_TxEnable &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_DealStruct
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_Ask
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_Report
</UL>

<P><STRONG><a name="[127]"></a>App_NL_Ask</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, app_nl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = App_NL_Ask &rArr; App_NL_SendStruct &rArr; BSP_UART_Write &rArr; MODE485_TxEnable &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_SendStruct
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_FillCSCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_DealStruct
</UL>

<P><STRONG><a name="[129]"></a>App_NL_DealStruct</STRONG> (Thumb, 1638 bytes, Stack size 88 bytes, app_nl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = App_NL_DealStruct &rArr; Reset_Para_All &rArr; Reset_Para_Function &rArr; GWPara_function &rArr; App_Para_Write &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCGetTime
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWPara_function
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_SetH
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCSetTime
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_Ask
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_SendStruct
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_FillCSCheck
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_ONEDATA_Function
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Para_All
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Para_Not_Comunication
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Wdt_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_Receive
</UL>

<P><STRONG><a name="[f5]"></a>App_NL_Receive</STRONG> (Thumb, 172 bytes, Stack size 144 bytes, app_nl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = App_NL_Receive &rArr; App_NL_DealStruct &rArr; Reset_Para_All &rArr; Reset_Para_Function &rArr; GWPara_function &rArr; App_Para_Write &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_DealStruct
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_ClearBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ManipulatorMain
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Receive
</UL>

<P><STRONG><a name="[f9]"></a>App_NL_Report</STRONG> (Thumb, 284 bytes, Stack size 168 bytes, app_nl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = App_NL_Report &rArr; GWFirstData_function &rArr; App_BigSammTpyeToLen &rArr; GWPara_function &rArr; App_Para_Write &rArr; Bsp_EEPROM_Write &rArr; Bsp_I2CSPM_BasePower_Init &rArr; Bsp_I2CSPM_Init &rArr; I2C_Init &rArr; I2C_BusFreqSet &rArr; CMU_ClockFreqGet &rArr; CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCGetTime
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWPara_function
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_SendStruct
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_FillCSCheck
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWFirstData_function
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Report
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT64SToDada03
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT64SToDada02
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FiveByteToLong
</UL>

<P><STRONG><a name="[165]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_ReceStruct
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Agr_MakeFrame
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Rx_Frame
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_Receive
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Write
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_I2CSPM_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWPara_function
</UL>

<P><STRONG><a name="[167]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAddress
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_Report
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_ClearTxBuff
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_ClearRxBuff
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_DealStruct
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_ONEDATA_Function
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Para_Function
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NL_Report
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f0]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_AT_CMD
</UL>

<P><STRONG><a name="[ef]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Main
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Repower
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_AT_CMD
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Set
</UL>

<P><STRONG><a name="[fe]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAddress
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSqrt
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSqrt
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSqrt
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AberranceRate
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSqrt
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[16d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[12c]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[26]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[16f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__0sprintf$6</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[172]"></a>__1sprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[f2]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_GetConentIP
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_SetConentIP
</UL>

<P><STRONG><a name="[173]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[174]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[175]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[39]"></a>GPIO_PortInGet</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PortInGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ODD_IRQHandler
</UL>

<P><STRONG><a name="[44]"></a>GPIO_IntClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EVEN_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ODD_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>BITBAND_Peripheral</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BITBAND_Peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_PCNTClockExternalSet
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>

<P><STRONG><a name="[4b]"></a>CMU_FlashWaitStateControl</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CMU_FlashWaitStateControl
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_FlashWaitStateMax
</UL>

<P><STRONG><a name="[4a]"></a>CMU_FlashWaitStateMax</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CMU_FlashWaitStateMax &rArr; CMU_FlashWaitStateControl
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_FlashWaitStateControl
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_HFRCOBandSet
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
</UL>

<P><STRONG><a name="[4c]"></a>CMU_DivToLog2</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CMU_DivToLog2
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivGet
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[4f]"></a>CMU_AUXClkGet</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, em_cmu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_DBGClkGet
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[4e]"></a>CMU_DBGClkGet</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CMU_DBGClkGet &rArr; CMU_ClockSelectGet
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectGet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_AUXClkGet
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[50]"></a>CMU_LFClkGet</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, em_cmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CMU_LFClkGet &rArr; SystemCoreClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFXOClockGet
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemULFRCOClockGet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFRCOClockGet
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[57]"></a>CMU_Log2ToDiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, em_cmu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivGet
</UL>

<P><STRONG><a name="[59]"></a>CMU_Sync</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, em_cmu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockDivSet
</UL>

<P><STRONG><a name="[6c]"></a>BITBAND_Peripheral</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, em_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CfgChannel
</UL>

<P><STRONG><a name="[67]"></a>DMA_Prepare</STRONG> (Thumb, 194 bytes, Stack size 52 bytes, em_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ActivatePingPong
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ActivateBasic
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ActivateAuto
</UL>

<P><STRONG><a name="[75]"></a>EMU_Restore</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, em_emu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EMU_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM2
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM3
</UL>

<P><STRONG><a name="[74]"></a>getErrataFixEmuE107En</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, em_emu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM2
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_EnterEM3
</UL>

<P><STRONG><a name="[7a]"></a>BITBAND_Peripheral</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, em_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BITBAND_Peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IntConfig
</UL>

<P><STRONG><a name="[7f]"></a>BITBAND_Peripheral</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, em_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BITBAND_Peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable
</UL>

<P><STRONG><a name="[86]"></a>LEUART_Sync</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, em_leuart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_RxDmaInEM2Enable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_TxDmaInEM2Enable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_TxExt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Tx
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_Enable
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEUART_BaudrateSet
</UL>

<P><STRONG><a name="[a1]"></a>BITBAND_Peripheral</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, em_wdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BITBAND_Peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Lock
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Enable
</UL>

<P><STRONG><a name="[a9]"></a>Bsp_EEPROM_AckPoll</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, bsp_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Bsp_EEPROM_AckPoll &rArr; Bsp_I2CSPM_Transfer &rArr; I2C_TransferInit &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_I2CSPM_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_EEPROM_Write
</UL>

<P><STRONG><a name="[b2]"></a>BSP_IsLeap_Year</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bsp_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCGetTime
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCSetTime
</UL>

<P><STRONG><a name="[bf]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[be]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[e9]"></a>GPIO_PinOutClear</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_m6310.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinOutClear
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Main
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_On_Off_Ctrl
</UL>

<P><STRONG><a name="[eb]"></a>App_Gprs_On_Off_Ctrl</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, app_m6310.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = App_Gprs_On_Off_Ctrl &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assertEFM
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutClear
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Gprs_Power_On
</UL>

<P><STRONG><a name="[109]"></a>SpeacilParaID_040D</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, app_para.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SpeacilParaID_040D &rArr; BSP_RTCGetTime &rArr; Bsp_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCGetTime
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCSetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWPara_function
</UL>

<P><STRONG><a name="[10a]"></a>SpeacilParaID_040F</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, app_para.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWPara_function
</UL>

<P><STRONG><a name="[10b]"></a>SpeacilParaID_04FF</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_para.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWPara_function
</UL>

<P><STRONG><a name="[10c]"></a>ParaData_SearchID</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_para.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ParaData_SearchID
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWPara_function
</UL>

<P><STRONG><a name="[116]"></a>OneData_SearchID</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OneData_SearchID
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GWFirstData_function
</UL>

<P><STRONG><a name="[11a]"></a>App_485_ClearBuff</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_485rn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = App_485_ClearBuff &rArr; BSP_UART_ClearTxBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_ClearTxBuff
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_ClearRxBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_ReadMeter
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_SendStruct
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_485_SendArray
</UL>

<P><STRONG><a name="[132]"></a>_printf_core</STRONG> (Thumb, 748 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>

<P><STRONG><a name="[135]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[133]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[24]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
